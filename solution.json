{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.17.1.54307",
      "templateHash": "12164243178522471005"
    }
  },
  "parameters": {
    "ComputeGalleryName": {
      "type": "string",
      "defaultValue": "cg_aib_d_use",
      "metadata": {
        "description": "The name of the compute gallery for managing the images."
      }
    },
    "DeploymentScriptName": {
      "type": "string",
      "defaultValue": "ds-aib-d-use",
      "metadata": {
        "description": "The name of the deployment script for configuring an existing subnet."
      }
    },
    "ExemptPolicyAssignmentIds": {
      "type": "array",
      "defaultValue": [
        "/subscriptions/3764b123-4849-4395-8e6e-ca6d68d8d4b4/providers/Microsoft.Authorization/policyAssignments/ASC provisioning Guest Configuration agent for Windows"
      ],
      "metadata": {
        "description": "Any Azure polices that would affect the AIB build VM should have an exemption for the AIB staging resource group. Common examples are policies that push the Guest Configuration agent or the Microsoft Defender for Endpoint agent. Reference: https://learn.microsoft.com/en-us/azure/virtual-machines/linux/image-builder-troubleshoot#prerequisites"
      }
    },
    "ImageDefinitionName": {
      "type": "string",
      "defaultValue": "Win11-22h2-avd",
      "metadata": {
        "description": "The name of the Image Definition for the Shared Image Gallery."
      }
    },
    "ImageDefinitionSecurityType": {
      "type": "string",
      "defaultValue": "TrustedLaunch",
      "metadata": {
        "description": "The security type for the Image Definition."
      },
      "allowedValues": [
        "ConfidentialVM",
        "ConfidentialVMSupported",
        "Standard",
        "TrustedLaunch"
      ]
    },
    "ImageOffer": {
      "type": "string",
      "defaultValue": "windows-11",
      "metadata": {
        "description": "The offer of the marketplace image."
      }
    },
    "ImagePublisher": {
      "type": "string",
      "defaultValue": "microsoftwindowsdesktop",
      "metadata": {
        "description": "The publisher of the marketplace image."
      }
    },
    "ImageSku": {
      "type": "string",
      "defaultValue": "win11-22h2-avd",
      "metadata": {
        "description": "The SKU of the marketplace image."
      }
    },
    "ImageVersion": {
      "type": "string",
      "defaultValue": "latest",
      "metadata": {
        "description": "The version of the marketplace image."
      }
    },
    "ImageStorageAccountType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_ZRS"
      ],
      "metadata": {
        "description": "The storage SKU for the image version replica in the Shared Image Gallery."
      }
    },
    "ImageTemplateName": {
      "type": "string",
      "defaultValue": "it-d-va-win11-22h2-avd",
      "metadata": {
        "description": "The name of the image template used to build an image with AIB."
      }
    },
    "InstallAccess": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Determine whether you want to install Microsoft Access in the image."
      }
    },
    "InstallExcel": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Determine whether you want to install Microsoft Excel in the image."
      }
    },
    "InstallFSLogix": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Determine whether you want to install FSLogix in the image."
      }
    },
    "InstallOneDriveForBusiness": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Determine whether you want to install Microsoft One Drive for Business in the image."
      }
    },
    "InstallOneNote": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Determine whether you want to install Microsoft OneNote in the image."
      }
    },
    "InstallOutlook": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Determine whether you want to install Microsoft Outlook in the image."
      }
    },
    "InstallPowerPoint": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Determine whether you want to install Microsoft PowerPoint in the image."
      }
    },
    "InstallProject": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Determine whether you want to install Microsoft Project in the image."
      }
    },
    "InstallPublisher": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Determine whether you want to install Microsoft Publisher in the image."
      }
    },
    "InstallSkypeForBusiness": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Determine whether you want to install Microsoft Skype for Business in the image."
      }
    },
    "InstallTeams": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Determine whether you want to install Microsoft Teams in the image."
      }
    },
    "InstallVirtualDesktopOptimizationTool": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Determine whether you want to execute the Virtual Desktop Optimization Tool on the image. https://github.com/The-Virtual-Desktop-Team/Virtual-Desktop-Optimization-Tool"
      }
    },
    "InstallVisio": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Determine whether you want to install Microsoft Visio in the image."
      }
    },
    "InstallWord": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Determine whether you want to install Microsoft Word in the image."
      }
    },
    "Location": {
      "type": "string",
      "defaultValue": "[deployment().location]",
      "metadata": {
        "description": "The location for the resources deployed in this solution."
      }
    },
    "ResourceGroupName": {
      "type": "string",
      "defaultValue": "rg-aib-d-use"
    },
    "SubnetName": {
      "type": "string",
      "defaultValue": "Clients",
      "metadata": {
        "description": "The subnet name of an existing virtual network."
      }
    },
    "Tags": {
      "type": "object",
      "defaultValue": {}
    },
    "TenantType": {
      "type": "string",
      "defaultValue": "Commercial",
      "allowedValues": [
        "Commercial",
        "DepartmentOfDefense",
        "GovernmentCommunityCloud",
        "GovernmentCommunityCloudHigh"
      ]
    },
    "Timestamp": {
      "type": "string",
      "defaultValue": "[utcNow('yyyyMMddhhmmss')]",
      "metadata": {
        "description": "DO NOT MODIFY THIS VALUE! The timestamp is needed to differentiate deployments for certain Azure resources and must be set using a parameter."
      }
    },
    "UserAssignedIdentityName": {
      "type": "string",
      "defaultValue": "uai-aib-d-use"
    },
    "VirtualMachineSize": {
      "type": "string",
      "defaultValue": "Standard_D4ds_v5",
      "metadata": {
        "description": "The size of the virtual machine used for creating the image.  The recommendation is to use a 'Standard_D2_v2' size or greater for AVD. https://github.com/danielsollondon/azvmimagebuilder/tree/master/solutions/14_Building_Images_WVD"
      }
    },
    "VirtualNetworkName": {
      "type": "string",
      "defaultValue": "vnet-net-d-eu",
      "metadata": {
        "description": "The name of an existing virtual network. If choosing a private endpoint for the storage account, the virtual network should contain a DNS server with the appropriate conditional forwarder."
      }
    },
    "VirtualNetworkResourceGroupName": {
      "type": "string",
      "defaultValue": "rg-net-d-eu",
      "metadata": {
        "description": "The resource group name of an existing virtual network. If choosing a private endpoint for the storage account, the virtual network should contain a DNS server with the appropriate conditional forwarder."
      }
    }
  },
  "variables": {
    "Roles": [
      {
        "resourceGroup": "[parameters('VirtualNetworkResourceGroupName')]",
        "name": "Virtual Network Join",
        "description": "Allow resources to join a subnet",
        "permissions": [
          {
            "actions": [
              "Microsoft.Network/virtualNetworks/read",
              "Microsoft.Network/virtualNetworks/subnets/read",
              "Microsoft.Network/virtualNetworks/subnets/join/action",
              "Microsoft.Network/virtualNetworks/subnets/write"
            ]
          }
        ]
      },
      {
        "resourceGroup": "[parameters('ResourceGroupName')]",
        "name": "Image Template Contributor",
        "description": "Allow the creation and management of images",
        "permissions": [
          {
            "actions": [
              "Microsoft.Compute/galleries/read",
              "Microsoft.Compute/galleries/images/read",
              "Microsoft.Compute/galleries/images/versions/read",
              "Microsoft.Compute/galleries/images/versions/write",
              "Microsoft.Compute/images/read",
              "Microsoft.Compute/images/write",
              "Microsoft.Compute/images/delete"
            ]
          }
        ]
      }
    ],
    "StagingResourceGroupName": "[format('{0}-staging-{1}', parameters('ResourceGroupName'), parameters('ImageSku'))]",
    "TeamsUrl": "[variables('TeamsUrls')[parameters('TenantType')]]",
    "TeamsUrls": {
      "Commercial": "https://teams.microsoft.com/downloads/desktopurl?env=production&plat=windows&arch=x64&managedInstaller=true&download=true",
      "DepartmentOfDefense": "https://dod.teams.microsoft.us/downloads/desktopurl?env=production&plat=windows&arch=x64&managedInstaller=true&download=true",
      "GovernmentCommunityCloud": "https://teams.microsoft.com/downloads/desktopurl?env=production&plat=windows&arch=x64&managedInstaller=true&ring=general_gcc&download=true",
      "GovernmentCommunityCloudHigh": "https://gov.teams.microsoft.us/downloads/desktopurl?env=production&plat=windows&arch=x64&managedInstaller=true&download=true"
    }
  },
  "resources": [
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2019-10-01",
      "name": "[parameters('ResourceGroupName')]",
      "location": "[parameters('Location')]",
      "tags": "[parameters('Tags')]",
      "properties": {}
    },
    {
      "copy": {
        "name": "roleDefinitions",
        "count": "[length(range(0, length(variables('Roles'))))]"
      },
      "type": "Microsoft.Authorization/roleDefinitions",
      "apiVersion": "2015-07-01",
      "name": "[guid(variables('Roles')[range(0, length(variables('Roles')))[copyIndex()]].name, subscription().id)]",
      "properties": {
        "roleName": "[format('{0} ({1})', variables('Roles')[range(0, length(variables('Roles')))[copyIndex()]].name, subscription().subscriptionId)]",
        "description": "[variables('Roles')[range(0, length(variables('Roles')))[copyIndex()]].description]",
        "permissions": "[variables('Roles')[range(0, length(variables('Roles')))[copyIndex()]].permissions]",
        "assignableScopes": [
          "[subscription().id]"
        ]
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('UserAssignedIdentity_{0}', parameters('Timestamp'))]",
      "resourceGroup": "[parameters('ResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "Location": {
            "value": "[parameters('Location')]"
          },
          "Name": {
            "value": "[parameters('UserAssignedIdentityName')]"
          },
          "Tags": {
            "value": "[parameters('Tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "3163069718352189003"
            }
          },
          "parameters": {
            "Location": {
              "type": "string"
            },
            "Name": {
              "type": "string"
            },
            "Tags": {
              "type": "object"
            }
          },
          "resources": [
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2018-11-30",
              "name": "[parameters('Name')]",
              "location": "[parameters('Location')]",
              "tags": "[parameters('Tags')]"
            }
          ],
          "outputs": {
            "PrincipalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('Name')), '2018-11-30').principalId]"
            },
            "ResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('Name'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('ResourceGroupName'))]"
      ]
    },
    {
      "copy": {
        "name": "roleAssignments",
        "count": "[length(range(0, length(variables('Roles'))))]",
        "mode": "serial",
        "batchSize": 1
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('RoleAssignments_{0}_{1}', range(0, length(variables('Roles')))[copyIndex()], parameters('Timestamp'))]",
      "resourceGroup": "[variables('Roles')[range(0, length(variables('Roles')))[copyIndex()]].resourceGroup]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "PrincipalId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ResourceGroupName')), 'Microsoft.Resources/deployments', format('UserAssignedIdentity_{0}', parameters('Timestamp'))), '2022-09-01').outputs.PrincipalId.value]"
          },
          "RoleDefinitionId": {
            "value": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', guid(variables('Roles')[range(0, length(variables('Roles')))[range(0, length(variables('Roles')))[copyIndex()]]].name, subscription().id))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "3114694774721710459"
            }
          },
          "parameters": {
            "PrincipalId": {
              "type": "string"
            },
            "RoleDefinitionId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-10-01-preview",
              "name": "[guid(parameters('PrincipalId'), parameters('RoleDefinitionId'), resourceGroup().id)]",
              "properties": {
                "roleDefinitionId": "[parameters('RoleDefinitionId')]",
                "principalId": "[parameters('PrincipalId')]",
                "principalType": "ServicePrincipal"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', guid(variables('Roles')[range(0, length(variables('Roles')))[range(0, length(variables('Roles')))[copyIndex()]]].name, subscription().id))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ResourceGroupName')), 'Microsoft.Resources/deployments', format('UserAssignedIdentity_{0}', parameters('Timestamp')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('ComputeGallery_{0}', parameters('Timestamp'))]",
      "resourceGroup": "[parameters('ResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "ComputeGalleryName": {
            "value": "[parameters('ComputeGalleryName')]"
          },
          "ImageDefinitionName": {
            "value": "[parameters('ImageDefinitionName')]"
          },
          "ImageDefinitionSecurityType": {
            "value": "[parameters('ImageDefinitionSecurityType')]"
          },
          "ImageOffer": {
            "value": "[parameters('ImageOffer')]"
          },
          "ImagePublisher": {
            "value": "[parameters('ImagePublisher')]"
          },
          "ImageSku": {
            "value": "[parameters('ImageSku')]"
          },
          "Location": {
            "value": "[parameters('Location')]"
          },
          "Tags": {
            "value": "[parameters('Tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "9828867393297655598"
            }
          },
          "parameters": {
            "ComputeGalleryName": {
              "type": "string"
            },
            "ImageDefinitionName": {
              "type": "string"
            },
            "ImageDefinitionSecurityType": {
              "type": "string"
            },
            "ImageOffer": {
              "type": "string"
            },
            "ImagePublisher": {
              "type": "string"
            },
            "ImageSku": {
              "type": "string"
            },
            "Location": {
              "type": "string"
            },
            "Tags": {
              "type": "object"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Compute/galleries",
              "apiVersion": "2022-01-03",
              "name": "[parameters('ComputeGalleryName')]",
              "location": "[parameters('Location')]",
              "tags": "[parameters('Tags')]"
            },
            {
              "type": "Microsoft.Compute/galleries/images",
              "apiVersion": "2022-01-03",
              "name": "[format('{0}/{1}', parameters('ComputeGalleryName'), parameters('ImageDefinitionName'))]",
              "location": "[parameters('Location')]",
              "tags": "[parameters('Tags')]",
              "properties": {
                "osType": "Windows",
                "osState": "Generalized",
                "hyperVGeneration": "[if(or(contains(parameters('ImageSku'), '-g2'), contains(parameters('ImageSku'), 'win11-')), 'V2', 'V1')]",
                "identifier": {
                  "publisher": "[parameters('ImagePublisher')]",
                  "offer": "[parameters('ImageOffer')]",
                  "sku": "[parameters('ImageSku')]"
                },
                "features": "[if(equals(parameters('ImageDefinitionSecurityType'), 'Standard'), null(), createArray(createObject('name', 'SecurityType', 'value', parameters('ImageDefinitionSecurityType'))))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/galleries', parameters('ComputeGalleryName'))]"
              ]
            }
          ],
          "outputs": {
            "ImageDefinitionResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Compute/galleries/images', parameters('ComputeGalleryName'), parameters('ImageDefinitionName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('ResourceGroupName'))]"
      ]
    },
    {
      "condition": "[and(and(not(empty(parameters('SubnetName'))), not(empty(parameters('VirtualNetworkName')))), not(empty(parameters('VirtualNetworkResourceGroupName'))))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('NetworkPolicy_{0}', parameters('Timestamp'))]",
      "resourceGroup": "[parameters('ResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "DeploymentScriptName": {
            "value": "[parameters('DeploymentScriptName')]"
          },
          "Location": {
            "value": "[parameters('Location')]"
          },
          "SubnetName": {
            "value": "[parameters('SubnetName')]"
          },
          "Tags": {
            "value": "[parameters('Tags')]"
          },
          "Timestamp": {
            "value": "[parameters('Timestamp')]"
          },
          "UserAssignedIdentityResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ResourceGroupName')), 'Microsoft.Resources/deployments', format('UserAssignedIdentity_{0}', parameters('Timestamp'))), '2022-09-01').outputs.ResourceId.value]"
          },
          "VirtualNetworkName": {
            "value": "[parameters('VirtualNetworkName')]"
          },
          "VirtualNetworkResourceGroupName": {
            "value": "[parameters('VirtualNetworkResourceGroupName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "12308001312789708638"
            }
          },
          "parameters": {
            "DeploymentScriptName": {
              "type": "string"
            },
            "Location": {
              "type": "string"
            },
            "SubnetName": {
              "type": "string"
            },
            "Tags": {
              "type": "object"
            },
            "Timestamp": {
              "type": "string"
            },
            "UserAssignedIdentityResourceId": {
              "type": "string"
            },
            "VirtualNetworkName": {
              "type": "string"
            },
            "VirtualNetworkResourceGroupName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deploymentScripts",
              "apiVersion": "2020-10-01",
              "name": "[parameters('DeploymentScriptName')]",
              "location": "[parameters('Location')]",
              "tags": "[parameters('Tags')]",
              "kind": "AzurePowerShell",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', parameters('UserAssignedIdentityResourceId'))]": {}
                }
              },
              "properties": {
                "arguments": "[format('-Subnet {0} -VirtualNetwork {1} -ResourceGroup {2}', parameters('SubnetName'), parameters('VirtualNetworkName'), parameters('VirtualNetworkResourceGroupName'))]",
                "azPowerShellVersion": "9.4",
                "cleanupPreference": "Always",
                "forceUpdateTag": "[parameters('Timestamp')]",
                "retentionInterval": "PT2H",
                "scriptContent": "Param([string]$ResourceGroup, [string]$Subnet, [string]$VirtualNetwork); $VNET = Get-AzVirtualNetwork -Name $VirtualNetwork -ResourceGroupName $ResourceGroup; ($VNET | Select-Object -ExpandProperty \"Subnets\" | Where-Object {$_.Name -eq $Subnet}).privateLinkServiceNetworkPolicies = \"Disabled\"; $VNET | Set-AzVirtualNetwork",
                "timeout": "PT30M"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('ResourceGroupName'))]",
        "roleAssignments",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ResourceGroupName')), 'Microsoft.Resources/deployments', format('UserAssignedIdentity_{0}', parameters('Timestamp')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('ImageTemplate_{0}', parameters('Timestamp'))]",
      "resourceGroup": "[parameters('ResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "ImageDefinitionResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ResourceGroupName')), 'Microsoft.Resources/deployments', format('ComputeGallery_{0}', parameters('Timestamp'))), '2022-09-01').outputs.ImageDefinitionResourceId.value]"
          },
          "ImageOffer": {
            "value": "[parameters('ImageOffer')]"
          },
          "ImagePublisher": {
            "value": "[parameters('ImagePublisher')]"
          },
          "ImageSku": {
            "value": "[parameters('ImageSku')]"
          },
          "ImageStorageAccountType": {
            "value": "[parameters('ImageStorageAccountType')]"
          },
          "ImageTemplateName": {
            "value": "[parameters('ImageTemplateName')]"
          },
          "ImageVersion": {
            "value": "[parameters('ImageVersion')]"
          },
          "InstallAccess": {
            "value": "[parameters('InstallAccess')]"
          },
          "InstallExcel": {
            "value": "[parameters('InstallExcel')]"
          },
          "InstallFSLogix": {
            "value": "[parameters('InstallFSLogix')]"
          },
          "InstallOneDriveForBusiness": {
            "value": "[parameters('InstallOneDriveForBusiness')]"
          },
          "InstallOneNote": {
            "value": "[parameters('InstallOneNote')]"
          },
          "InstallOutlook": {
            "value": "[parameters('InstallOutlook')]"
          },
          "InstallPowerPoint": {
            "value": "[parameters('InstallPowerPoint')]"
          },
          "InstallProject": {
            "value": "[parameters('InstallProject')]"
          },
          "InstallPublisher": {
            "value": "[parameters('InstallPublisher')]"
          },
          "InstallSkypeForBusiness": {
            "value": "[parameters('InstallSkypeForBusiness')]"
          },
          "InstallTeams": {
            "value": "[parameters('InstallTeams')]"
          },
          "InstallVirtualDesktopOptimizationTool": {
            "value": "[parameters('InstallVirtualDesktopOptimizationTool')]"
          },
          "InstallVisio": {
            "value": "[parameters('InstallVisio')]"
          },
          "InstallWord": {
            "value": "[parameters('InstallWord')]"
          },
          "Location": {
            "value": "[parameters('Location')]"
          },
          "StagingResourceGroupName": {
            "value": "[variables('StagingResourceGroupName')]"
          },
          "SubnetName": {
            "value": "[parameters('SubnetName')]"
          },
          "Tags": {
            "value": "[parameters('Tags')]"
          },
          "TeamsUrl": {
            "value": "[variables('TeamsUrl')]"
          },
          "Timestamp": {
            "value": "[parameters('Timestamp')]"
          },
          "UserAssignedIdentityResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ResourceGroupName')), 'Microsoft.Resources/deployments', format('UserAssignedIdentity_{0}', parameters('Timestamp'))), '2022-09-01').outputs.ResourceId.value]"
          },
          "VirtualMachineSize": {
            "value": "[parameters('VirtualMachineSize')]"
          },
          "VirtualNetworkName": {
            "value": "[parameters('VirtualNetworkName')]"
          },
          "VirtualNetworkResourceGroupName": {
            "value": "[parameters('VirtualNetworkResourceGroupName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "13153345860483951734"
            }
          },
          "parameters": {
            "ImageDefinitionResourceId": {
              "type": "string"
            },
            "ImageOffer": {
              "type": "string"
            },
            "ImagePublisher": {
              "type": "string"
            },
            "ImageSku": {
              "type": "string"
            },
            "ImageStorageAccountType": {
              "type": "string"
            },
            "ImageTemplateName": {
              "type": "string"
            },
            "ImageVersion": {
              "type": "string"
            },
            "InstallAccess": {
              "type": "bool"
            },
            "InstallExcel": {
              "type": "bool"
            },
            "InstallFSLogix": {
              "type": "bool"
            },
            "InstallOneDriveForBusiness": {
              "type": "bool"
            },
            "InstallOneNote": {
              "type": "bool"
            },
            "InstallOutlook": {
              "type": "bool"
            },
            "InstallPowerPoint": {
              "type": "bool"
            },
            "InstallProject": {
              "type": "bool"
            },
            "InstallPublisher": {
              "type": "bool"
            },
            "InstallSkypeForBusiness": {
              "type": "bool"
            },
            "InstallTeams": {
              "type": "bool"
            },
            "InstallVirtualDesktopOptimizationTool": {
              "type": "bool"
            },
            "InstallVisio": {
              "type": "bool"
            },
            "InstallWord": {
              "type": "bool"
            },
            "Location": {
              "type": "string"
            },
            "StagingResourceGroupName": {
              "type": "string"
            },
            "SubnetName": {
              "type": "string"
            },
            "Tags": {
              "type": "object"
            },
            "TeamsUrl": {
              "type": "string"
            },
            "Timestamp": {
              "type": "string"
            },
            "UserAssignedIdentityResourceId": {
              "type": "string"
            },
            "VirtualMachineSize": {
              "type": "string"
            },
            "VirtualNetworkName": {
              "type": "string"
            },
            "VirtualNetworkResourceGroupName": {
              "type": "string"
            }
          },
          "variables": {
            "CreateTempDir": [
              {
                "type": "PowerShell",
                "name": "Create the TEMP Directory",
                "runElevated": true,
                "runAsSystem": true,
                "inline": [
                  "New-Item -Path \"C:\\\" -Name \"temp\" -ItemType \"Directory\" -Force | Out-Null",
                  "Write-Host \"Created Temp Directory\""
                ]
              }
            ],
            "Environment": "[environment().name]",
            "FSLogix": "[if(parameters('InstallFSLogix'), createArray(createObject('type', 'PowerShell', 'name', 'Download FSLogix', 'runElevated', true(), 'runAsSystem', true(), 'inline', createArray('$ErrorActionPreference = \"Stop\"', '$ZIP = \"C:\\temp\\fslogix.zip\"', 'Invoke-WebRequest -Uri \"https://aka.ms/fslogix_download\" -OutFile $ZIP', 'Unblock-File -Path $ZIP', 'Expand-Archive -LiteralPath $ZIP -DestinationPath \"C:\\temp\\fslogix\" -Force', 'Write-Host \"Downloaded the latest version of FSLogix\"')), createObject('type', 'PowerShell', 'name', 'Install FSLogix', 'runElevated', true(), 'runAsSystem', true(), 'inline', createArray('$ErrorActionPreference = \"Stop\"', 'Start-Process -FilePath \"C:\\temp\\fslogix\\x64\\Release\\FSLogixAppsSetup.exe\" -ArgumentList \"/install /quiet /norestart\" -Wait -PassThru | Out-Null', 'Write-Host \"Installed the latest version of FSLogix\"')), createObject('type', 'WindowsRestart', 'name', 'Restart after the installation of FSLogix ')), createArray())]",
            "MultiSessionOs": "[or(contains(parameters('ImageSku'), 'avd'), contains(parameters('ImageSku'), 'evd'))]",
            "O365ConfigHeader": "<Configuration><Add OfficeClientEdition=\"64\" Channel=\"Current\">",
            "O365AddOfficeHeader": "[if(or(or(or(or(or(or(or(or(or(parameters('InstallAccess'), parameters('InstallExcel')), parameters('InstallOneDriveForBusiness')), parameters('InstallOneNote')), parameters('InstallOutlook')), parameters('InstallPowerPoint')), parameters('InstallPublisher')), parameters('InstallSkypeForBusiness')), and(parameters('InstallTeams'), equals(variables('Environment'), 'AzureCloud'))), parameters('InstallWord')), '<Product ID=\"O365ProPlusRetail\"><Language ID=\"en-us\" />', '')]",
            "O365AddAccess": "[if(parameters('InstallAccess'), '', '<ExcludeApp ID=\"Access\" />')]",
            "O365AddExcel": "[if(parameters('InstallExcel'), '', '<ExcludeApp ID=\"Excel\" />')]",
            "O365AddOneDriveForBusiness": "[if(parameters('InstallOneDriveForBusiness'), '', '<ExcludeApp ID=\"Groove\" />')]",
            "O365AddOneNote": "[if(parameters('InstallOneNote'), '', '<ExcludeApp ID=\"OneNote\" />')]",
            "O365AddOutlook": "[if(parameters('InstallOutlook'), '', '<ExcludeApp ID=\"Outlook\" />')]",
            "O365AddPowerPoint": "[if(parameters('InstallPowerPoint'), '', '<ExcludeApp ID=\"PowerPoint\" />')]",
            "O365AddPublisher": "[if(parameters('InstallPublisher'), '', '<ExcludeApp ID=\"Publisher\" />')]",
            "O365AddSkypeForBusiness": "[if(parameters('InstallSkypeForBusiness'), '', '<ExcludeApp ID=\"Lync\" />')]",
            "O365AddTeams": "[if(and(parameters('InstallTeams'), equals(variables('Environment'), 'AzureCloud')), '', '<ExcludeApp ID=\"Teams\" />')]",
            "O365AddWord": "[if(parameters('InstallWord'), '', '<ExcludeApp ID=\"Word\" />')]",
            "O365AddOfficeFooter": "[if(or(or(or(or(or(or(or(or(or(parameters('InstallAccess'), parameters('InstallExcel')), parameters('InstallOneDriveForBusiness')), parameters('InstallOneNote')), parameters('InstallOutlook')), parameters('InstallPowerPoint')), parameters('InstallPublisher')), parameters('InstallSkypeForBusiness')), and(parameters('InstallTeams'), equals(variables('Environment'), 'AzureCloud'))), parameters('InstallWord')), '</Product>', '')]",
            "O365AddProject": "[if(parameters('InstallProject'), '<Product ID=\"ProjectProRetail\"><Language ID=\"en-us\" /></Product>', '')]",
            "O365AddVisio": "[if(parameters('InstallVisio'), '<Product ID=\"VisioProRetail\"><Language ID=\"en-us\" /></Product>', '')]",
            "O365Settings": "</Add><Updates Enabled=\"FALSE\" /><Display Level=\"None\" AcceptEULA=\"TRUE\" /><Property Name=\"FORCEAPPSHUTDOWN\" Value=\"TRUE\"/>",
            "O365SharedActivation": "[if(variables('MultiSessionOs'), '<Property Name=\"SharedComputerLicensing\" Value=\"1\"/>', '')]",
            "O365ConfigFooter": "</Configuration>",
            "O365Content": "[format('{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}{11}{12}{13}{14}{15}{16}{17}', variables('O365ConfigHeader'), variables('O365AddOfficeHeader'), variables('O365AddAccess'), variables('O365AddExcel'), variables('O365AddOneDriveForBusiness'), variables('O365AddOneNote'), variables('O365AddOutlook'), variables('O365AddPowerPoint'), variables('O365AddPublisher'), variables('O365AddSkypeForBusiness'), variables('O365AddTeams'), variables('O365AddWord'), variables('O365AddOfficeFooter'), variables('O365AddProject'), variables('O365AddVisio'), variables('O365Settings'), variables('O365SharedActivation'), variables('O365ConfigFooter'))]",
            "Office": "[if(or(or(or(or(or(or(or(or(or(or(or(parameters('InstallAccess'), parameters('InstallExcel')), parameters('InstallOneDriveForBusiness')), parameters('InstallOneNote')), parameters('InstallOutlook')), parameters('InstallPowerPoint')), parameters('InstallPublisher')), parameters('InstallSkypeForBusiness')), and(parameters('InstallTeams'), equals(variables('Environment'), 'AzureCloud'))), parameters('InstallWord')), parameters('InstallVisio')), parameters('InstallProject')), createArray(createObject('type', 'PowerShell', 'name', 'Upload the Microsoft Office 365 Configuration File', 'runElevated', true(), 'runAsSystem', true(), 'inline', createArray(format('$Configuration = ''{0}''', variables('O365Content')), '$Configuration | Out-File -FilePath \"C:\\temp\\office365x64.xml\" -ErrorAction \"Stop\"', 'Write-Host \"Uploaded the Office365 configuration file\"')), createObject('type', 'PowerShell', 'name', 'Download & extract the Microsoft Office 365 Deployment Toolkit', 'runElevated', true(), 'runAsSystem', true(), 'inline', createArray('$ErrorActionPreference = \"Stop\"', '$Installer = \"C:\\temp\\office.exe\"', '$DownloadLinks = Invoke-WebRequest -Uri \"https://www.microsoft.com/en-us/download/confirmation.aspx?id=49117\"', '$URL = ($DownloadLinks.Links.href | where-object {$_ -like \"https://download.microsoft.com/download/*officedeploymenttool*\"})[0]', 'Invoke-WebRequest -Uri $URL -OutFile $Installer', 'Start-Process -FilePath $Installer -ArgumentList \"/extract:C:\\temp /quiet /passive /norestart\" -Wait -PassThru | Out-Null', 'Write-Host \"Downloaded & extracted the Office 365 Deployment Toolkit\"')), createObject('type', 'PowerShell', 'name', 'Install the selected Microsoft Office 365 applications', 'runElevated', true(), 'runAsSystem', true(), 'inline', createArray('$ErrorActionPreference = \"Stop\"', 'Start-Process -FilePath \"C:\\temp\\setup.exe\" -ArgumentList \"/configure C:\\temp\\office365x64.xml\" -Wait -PassThru | Out-Null', 'Write-Host \"Installed the selected Office365 applications\"'))), createArray())]",
            "Sysprep": [
              {
                "type": "PowerShell",
                "name": "Update the sysprep mode on the Deprovisioning Script",
                "runElevated": true,
                "runAsSystem": true,
                "inline": [
                  "$ErrorActionPreference = \"Stop\"",
                  "$Path = \"C:\\DeprovisioningScript.ps1\"",
                  "(Get-Content -Path $Path -Raw).Replace(\"/quit\",\"/quit /mode:vm\") | Set-Content -Path $Path",
                  "Write-Host \"Updated the deprovisioning script\""
                ]
              }
            ],
            "Teams": "[if(and(parameters('InstallTeams'), equals(variables('Environment'), 'AzureUSGovernment')), createArray(createObject('type', 'PowerShell', 'name', 'Enable media optimizations for Teams', 'runElevated', true(), 'runAsSystem', true(), 'inline', createArray(format('if({0} -eq \"true\"){{Start-Process \"reg\" -ArgumentList \"add HKLM\\SOFTWARE\\Microsoft\\Teams /v IsWVDEnvironment /t REG_DWORD /d 1 /f\" -Wait -PassThru -ErrorAction \"Stop\"; Write-Host \"Enabled media optimizations for Teams\"}}', variables('MultiSessionOs')))), createObject('type', 'PowerShell', 'name', 'Download & install the latest version of Microsoft Visual C++ Redistributable', 'runElevated', true(), 'runAsSystem', true(), 'inline', createArray('$ErrorActionPreference = \"Stop\"', '$File = \"C:\\temp\\vc_redist.x64.exe\"', 'Invoke-WebRequest -Uri \"https://aka.ms/vs/16/release/vc_redist.x64.exe\" -OutFile $File', 'Start-Process -FilePath $File -Args \"/install /quiet /norestart /log vcdist.log\" -Wait -PassThru | Out-Null', 'Write-Host \"Installed the latest version of Microsoft Visual C++ Redistributable\"')), createObject('type', 'PowerShell', 'name', 'Download & install the Remote Desktop WebRTC Redirector Service', 'runElevated', true(), 'runAsSystem', true(), 'inline', createArray('$ErrorActionPreference = \"Stop\"', '$File = \"C:\\temp\\webSocketSvc.msi\"', 'Invoke-WebRequest -Uri \"https://query.prod.cms.rt.microsoft.com/cms/api/am/binary/RE4AQBt\" -OutFile $File', 'Start-Process -FilePath msiexec.exe -Args \"/i $File /quiet /qn /norestart /passive /log webSocket.log\" -Wait -PassThru | Out-Null', 'Write-Host \"Installed the Remote Desktop WebRTC Redirector Service\"')), createObject('type', 'PowerShell', 'name', 'Download & install Teams', 'runElevated', true(), 'runAsSystem', true(), 'inline', createArray('$ErrorActionPreference = \"Stop\"', '$File = \"C:\\temp\\teams.msi\"', format('Invoke-WebRequest -Uri \"{0}\" -OutFile $File', parameters('TeamsUrl')), 'Start-Process -FilePath msiexec.exe -Args \"/i $File /quiet /qn /norestart /passive /log teams.log ALLUSER=1 ALLUSERS=1\" -Wait -PassThru | Out-Null', 'Write-Host \"Installed Teams\"'))), createArray())]",
            "VDOT": "[if(parameters('InstallVirtualDesktopOptimizationTool'), createArray(createObject('type', 'PowerShell', 'name', 'Download & execute the Virtual Desktop Optimization Tool', 'runElevated', true(), 'runAsSystem', true(), 'inline', createArray('$ErrorActionPreference = \"Stop\"', '$ZIP = \"C:\\temp\\VDOT.zip\"', 'Invoke-WebRequest -Uri \"https://github.com/The-Virtual-Desktop-Team/Virtual-Desktop-Optimization-Tool/archive/refs/heads/main.zip\" -OutFile $ZIP', 'Unblock-File -Path $ZIP', 'Expand-Archive -LiteralPath $ZIP -DestinationPath \"C:\\temp\" -Force', '$Path = (Get-ChildItem -Path \"C:\\temp\" -Recurse | Where-Object {$_.Name -eq \"Windows_VDOT.ps1\"}).FullName', '$Script = Get-Content -Path $Path', '$ScriptUpdate = $Script.Replace(\"Set-NetAdapterAdvancedProperty\",\"#Set-NetAdapterAdvancedProperty\")', '$ScriptUpdate | Set-Content -Path $Path', '& $Path -Optimizations @(\"AppxPackages\",\"Autologgers\",\"DefaultUserSettings\",\"LGPO\";\"NetworkOptimizations\",\"ScheduledTasks\",\"Services\",\"WindowsMediaPlayer\") -AdvancedOptimizations \"All\" -AcceptEULA', 'Write-Host \"Optimized the operating system using the Virtual Desktop Optimization Tool\"')), createObject('type', 'WindowsRestart', 'name', 'Restart after the execution of the Virtual Desktop Optimization Tool')), createArray())]",
            "RemoveTempDir": [
              {
                "type": "PowerShell",
                "name": "Remove the TEMP Directory",
                "runElevated": true,
                "runAsSystem": true,
                "inline": [
                  "Remove-Item -Path \"C:\\temp\" -Recurse -Force -ErrorAction \"Stop\" | Out-Null",
                  "Write-Host \"Removed Temp Directory\""
                ]
              }
            ],
            "WindowsUpdate": [
              {
                "type": "WindowsUpdate",
                "searchCriteria": "IsInstalled=0",
                "filters": [
                  "exclude:$_.Title -like '*Preview*'",
                  "include:$true"
                ]
              },
              {
                "type": "WindowsRestart",
                "name": "Restart after the Windows Updates"
              }
            ]
          },
          "resources": [
            {
              "type": "Microsoft.VirtualMachineImages/imageTemplates",
              "apiVersion": "2022-02-14",
              "name": "[parameters('ImageTemplateName')]",
              "location": "[parameters('Location')]",
              "tags": "[parameters('Tags')]",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', parameters('UserAssignedIdentityResourceId'))]": {}
                }
              },
              "properties": {
                "stagingResourceGroup": "[format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('StagingResourceGroupName'))]",
                "buildTimeoutInMinutes": 300,
                "vmProfile": {
                  "vmSize": "[parameters('VirtualMachineSize')]",
                  "vnetConfig": "[if(not(empty(parameters('SubnetName'))), createObject('subnetId', resourceId(parameters('VirtualNetworkResourceGroupName'), 'Microsoft.Network/virtualNetworks/subnets', parameters('VirtualNetworkName'), parameters('SubnetName'))), null())]"
                },
                "source": {
                  "type": "PlatformImage",
                  "publisher": "[parameters('ImagePublisher')]",
                  "offer": "[parameters('ImageOffer')]",
                  "sku": "[parameters('ImageSku')]",
                  "version": "[parameters('ImageVersion')]"
                },
                "customize": "[union(variables('CreateTempDir'), variables('VDOT'), variables('FSLogix'), variables('Office'), variables('Teams'), variables('RemoveTempDir'), variables('WindowsUpdate'), variables('Sysprep'))]",
                "distribute": [
                  {
                    "type": "SharedImage",
                    "galleryImageId": "[parameters('ImageDefinitionResourceId')]",
                    "runOutputName": "[parameters('Timestamp')]",
                    "artifactTags": {},
                    "replicationRegions": [
                      "[parameters('Location')]"
                    ],
                    "storageAccountType": "[parameters('ImageStorageAccountType')]"
                  }
                ]
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ResourceGroupName')), 'Microsoft.Resources/deployments', format('ComputeGallery_{0}', parameters('Timestamp')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ResourceGroupName')), 'Microsoft.Resources/deployments', format('NetworkPolicy_{0}', parameters('Timestamp')))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('ResourceGroupName'))]",
        "roleAssignments",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ResourceGroupName')), 'Microsoft.Resources/deployments', format('UserAssignedIdentity_{0}', parameters('Timestamp')))]"
      ]
    },
    {
      "copy": {
        "name": "policyExemptions",
        "count": "[length(range(0, length(parameters('ExemptPolicyAssignmentIds'))))]"
      },
      "condition": "[greater(length(parameters('ExemptPolicyAssignmentIds')), 0)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('PolicyExemption_{0}', range(0, length(parameters('ExemptPolicyAssignmentIds')))[copyIndex()])]",
      "resourceGroup": "[variables('StagingResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "PolicyAssignmentId": {
            "value": "[parameters('ExemptPolicyAssignmentIds')[range(0, length(parameters('ExemptPolicyAssignmentIds')))[copyIndex()]]]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "4794203918987823520"
            }
          },
          "parameters": {
            "PolicyAssignmentId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/policyExemptions",
              "apiVersion": "2022-07-01-preview",
              "name": "exempt-aib-staging-resource-group",
              "properties": {
                "assignmentScopeValidation": "Default",
                "description": "Exempts the AIB staging resource group to prevent issues with building images.",
                "displayName": "AIB staging resource group",
                "exemptionCategory": "Mitigated",
                "expiresOn": null,
                "metadata": null,
                "policyAssignmentId": "[parameters('PolicyAssignmentId')]",
                "policyDefinitionReferenceIds": [],
                "resourceSelectors": []
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ResourceGroupName')), 'Microsoft.Resources/deployments', format('ImageTemplate_{0}', parameters('Timestamp')))]"
      ]
    }
  ]
}